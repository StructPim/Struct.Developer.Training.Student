Hint 4
Your code should look something like this:

    //Get bogus data and map it to PIM data model
    var productBogusData = _importService.ReadProductBogusData();

    //Get existing category identifiers to determine placement/classification of products
    var categoryIdentifiers = _apiClient.Catalogues.GetInternalIdMap("Alias");

    //Get the clothing product structure
    var clothingProductStructure = _apiClient.ProductStructures.GetProductStructures().Single(x => x.Alias == "Clothing");

    //Select the variation definition for clothing products from the product structure above
    var variationDefinition = clothingProductStructure.VariationDefinitions.Single(v => v.Name == "Clothing");

    var productsToCreate = new List<CreateProductModel<ClothingProductModel>>();

    //Loop over bogus products and map them to a createmodel
    foreach (var product in productBogusData)
    {
        var productToCreate = new CreateProductModel<ClothingProductModel>();
                
        if (categoryIdentifiers.TryGetValue(product.ErpType, out var categoryId))
        {
            //Using the ERP type value on the product, a category with a matching alias was found
            productToCreate.PrimaryCategoryId = categoryId;
            productToCreate.CategoryIds = new List<int> { categoryId };
        }

        productToCreate.ProductStructureUid = clothingProductStructure.Uid;
        productToCreate.VariationDefinitionUid = variationDefinition.Uid;


        productToCreate.Values = Mapper.Map(product);                
        productsToCreate.Add(productToCreate);
    }

    var batches = productsToCreate.Batch(_writeBatchSize);
    var totalBatchesCount = batches.Count();
    var processed = 0;

    foreach (var batch in batches)
    {
        Console.WriteLine($"Done processing batch {++processed}/{totalBatchesCount}");
        _apiClient.Products.CreateProducts(batch.ToList());
    }

    //Mapper hint
    public static ClothingProductModel Map(ProductBogusModel bogusModel)
    {
        var salesChannels = new List<SaleChannelsGlobalListModel>();
        foreach (var saleChannel in bogusModel.SaleChannels)
        {
            salesChannels.Add(new SaleChannelsGlobalListModel() { Name = saleChannel, Alias = saleChannel });
        }

        return new ClothingProductModel
        {
            //Set SaleChannels to mapped value above.
            SalesChannels = salesChannels,

            //Map Brand as BrandsGlobalListModel
            Brand = new BrandsGlobalListModel() { Name = bogusModel.Brand },

            //Map CountryOfOrigin as List<LocalizedData<string>> with cultre codes da-DK and en-GB
            CountryOfOrigin = new List<LocalizedData<string>>
            {
                new LocalizedData<string>
                {
                    CultureCode = "da-DK",
                    Data = bogusModel.CountryOfOrigin
                },
                new LocalizedData<string>
                {
                    CultureCode = "en-GB",
                    Data = bogusModel.CountryOfOrigin
                }
            },

            //Map Description as List<LocalizedData<string>> with cultre codes da-DK and en-GB
            Description = new List<LocalizedData<string>>
            {
                new LocalizedData<string>
                {
                    CultureCode = "da-DK",
                    Data = bogusModel.Description
                },
                new LocalizedData<string>
                {
                    CultureCode = "en-GB",
                    Data = bogusModel.Description
                }
            },

            //Map Name as List<LocalizedData<string>> with cultre codes da-DK and en-GB
            Name = new List<LocalizedData<string>>
            {
                new LocalizedData<string>
                {
                    CultureCode = "da-DK",
                    Data = bogusModel.NameDa
                },
                new LocalizedData<string>
                {
                    CultureCode = "en-GB",
                    Data = bogusModel.NameEng
                }
            },

            //Style number is identifier for the product
            StyleNumber = bogusModel.StyleNo,

            //ERPType is used to map the product to a category
            ERPType = bogusModel.ErpType,
        };
    }