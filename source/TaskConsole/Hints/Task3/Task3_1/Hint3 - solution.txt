Your solution should look something like this:
public void DeltaUpdateExistingVariants()
{
    //Get bogus data and map it to PIM data model
    var variantBogusData = _importService.ReadExistingVariantDeltaBogusData();

    //Get existing variant identifiers to determine the variants to update
    var variantIdentifiers = _apiClient.Variants.GetInternalIdMap("SKU");

    //Loop over bogus variants and map them to an update model
    var variantsToUpdate = new Dictionary<int, UpdateVariantModel<VariantDeltaERPUpdateModel>>();
    foreach (var variant in variantBogusData)
    {
        if (variantIdentifiers.TryGetValue(variant.Sku, out var variantToUpdate))
        {
            var variantToUpdateModel = new UpdateVariantModel<VariantDeltaERPUpdateModel>();
            variantToUpdateModel.Values = Mapper.Map(variant);
            variantsToUpdate.Add(variantToUpdate, variantToUpdateModel);
        }
        else
        {
            Console.WriteLine($"Could not update variant as it is missing, variant sku: {variant.Sku}");
        }
    }

    var batches = variantsToUpdate.Batch(_writeBatchSize);
    var totalBatchesCount = batches.Count();
    var processed = 0;

    foreach (var batch in batches)
    {
        Console.WriteLine($"Done processing batch {++processed}/{totalBatchesCount}");
        var batchDict = batch.ToDictionary(x => x.Key, x => x.Value);
        _apiClient.Variants.UpdateVariants<VariantDeltaERPUpdateModel>(batchDict);
    }
}

//Mapper hint
public static VariantDeltaERPUpdateModel Map(VariantBogusModel bogusModel)
{
    return new VariantDeltaERPUpdateModel
    {

        //Map Material as MaterialGlobalListModel and set CultureCode to List<LocalizedData<string>> with culture code da-DK
        Material = new MaterialGlobalListModel() { 
            Name = new List<LocalizedData<string>>
            {
                new LocalizedData<string>
                {
                    CultureCode = "da-DK",
                    Data = bogusModel.Material
                }
            }
        },

        //Map BaseCostPrice
        BaseCostPrice = bogusModel.BaseCostPrice,

        //Map Color as ColorsGlobalListModel and set CultureCode to List<LocalizedData<string>> with culture code da-DK
        Color = new ColorsGlobalListModel()
        {
            Name = new List<LocalizedData<string>>
            {
                new LocalizedData<string>
                {
                    CultureCode = "da-DK",
                    Data = bogusModel.Color
                }
            },
                    
        },

        //Map PackageSize as PackageSizeModel
        PackageSize = new PackageSizeModel()
        {
            Height = bogusModel.PackageSize.Height,
            Length = bogusModel.PackageSize.Length,
            Width = bogusModel.PackageSize.Width
        },

        //Map Sku
        SKU = bogusModel.Sku,

        //Map Weight
        Weight = bogusModel.Weight,

        //Map Size
        Size = bogusModel.Size,
    };
}