public void UpdateCostPrices()
{
    //Fetch all variantIds from PIM
    var variantIds = _apiClient.Variants.GetVariantIds();

    //Find the currencies global list
    var currencyGlobalList = _apiClient.GlobalLists.GetGlobalList("Currency");

    //Fetch currencies which contains the conversionrates
    var currencies = _apiClient.GlobalLists.GetGlobalListValues<CurrencyGlobalListModel>(currencyGlobalList.Uid);

    var batches = variantIds.Batch(_writeBatchSize);
    var totalBatchesCount = batches.Count();
    var processed = 0;

    foreach (var batch in batches)
    {
        var updateModel = new Dictionary<int, UpdateVariantModel>();

        var variantValues = _apiClient.Variants.GetVariantAttributeValues(new VariantValuesRequestModel
        {
            Aliases = new List<string> { "BaseCostPrice" },
            IncludeValues = Struct.PIM.Api.Models.Shared.ValueIncludeMode.Aliases,
            VariantIds = batch.ToList()
        });

        foreach (var variant in variantValues)
        {
            //skip if no base cost price
            if (!variant.Values.TryGetValue("BaseCostPrice", out dynamic? baseCostPrice) || baseCostPrice == null)
                continue;

            var costPrices = new List<CostPricesModel>();
            foreach (var currency in currencies.GlobalListValues)
            {
                costPrices.Add(new CostPricesModel
                {
                    Currency = currency.Value,
                    Price = Convert.ToDecimal(baseCostPrice) / currency.Value.ConversionFactor
                });
            }
            var newvariantCostPrices = new Dictionary<string, dynamic>
            {
                { "CostPrices", costPrices }
            };
            updateModel.Add(variant.VariantId, new UpdateVariantModel { Values = newvariantCostPrices });
        }

        Console.WriteLine($"Calculated {updateModel.Count} variants. Updating...");

        _apiClient.Variants.UpdateVariants(updateModel);

        Console.WriteLine($"Done processing batch {++processed}/{totalBatchesCount}");
    }
}