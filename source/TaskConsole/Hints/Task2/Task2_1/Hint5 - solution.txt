Hint 5
public void FullExportProductData()
{
    var language = _apiClient.Languages.GetLanguages().First(x => x.CultureCode == "en-GB");

    var productIds = new List<int>();

    //Start by fetching the products from PIM
    productIds = _apiClient.Products.GetProductIds();

    var indexModels = FetchAndMapProductData(productIds, language);

    _indexService.CreateIndex(indexModels, IndexType.ProductIndex, language);
}

private List<ProductIndexModel> FetchAndMapProductData(List<int> productIds, LanguageModel language)
{
    var batches = productIds.Batch(_batchSize);
    var totalBatchesCount = batches.Count();
    var processed = 0;

    var indexModels = new List<ProductIndexModel>();

    foreach (var batch in batches)
    {
        //Fetch product attribute values in batches in task 2.1a
        var productAttributeValues = _apiClient.Products.GetProductAttributeValues<ClothingProductModel>(new ProductValuesRequestModel()
        {
            ProductIds = batch.ToList()
        });

        //fetch variants for products in task 2.1b
        var productToVariants = _apiClient.Products.GetVariantIds(batch.ToList());
        var variantIds = productToVariants.SelectMany(x => x.Value).ToList();
        var mappedVariants = GetIndexVariants(variantIds, language);

        //fetch classification for products into productToClassification in task 2.1c
        var productToClassification = GetProductClassification(batch.ToList());

        //Map product data in task 2.1a
        foreach (var productModel in productAttributeValues)
        {
            var productVariants = new List<VariantIndexModel>();

            //get variants belonging to product in task 2.1b
            var variants = productToVariants[productModel.ProductId];

            foreach (var variantId in variants)
            {
                productVariants.Add(mappedVariants[variantId]);
            }

            var productClassification = new List<int>();

            if (productToClassification.TryGetValue(productModel.ProductId, out var classifications))
            {
                productClassification = classifications.Select(x => x.CategoryId).ToList();
            };

            indexModels.Add(Mapper.Map(language, productModel.ProductId, productModel.Values, productVariants, productClassification));
        }

        Console.WriteLine($"Done processing product batch {++processed}/{totalBatchesCount}");
    }
    return indexModels;
}

private Dictionary<int, List<ProductClassificationModel>> GetProductClassification(List<int> productIds)
{
    var productToClassification = _apiClient.Products.GetProductClassifications(productIds);
    return productToClassification;

}

private Dictionary<int, VariantIndexModel> GetIndexVariants(List<int> variantIds, LanguageModel language)
{
    var batches = variantIds.Batch(_batchSize);
    var totalBatchCount = batches.Count();
    var processedBatches = 0;
    var mappedVariants = new Dictionary<int, VariantIndexModel>();
    foreach (var batch in batches)
    {
        //fetch variant attribute values and fetch values in batches in task 2.1b
        var variantAttributeValues = _apiClient.Variants.GetVariantAttributeValues<ClothingVariantModel>(new VariantValuesRequestModel()
        {
            VariantIds = variantIds
        }).ToDictionary(x => x.VariantId);

        var variants = _apiClient.Variants.GetVariants(variantIds);
        foreach (var variant in variants)
        {
            //Map variant data in task 2.1b
            mappedVariants.Add(variant.Id, Mapper.Map(language, variant, variantAttributeValues[variant.Id].Values));
        }
        Console.WriteLine($"Done processing variant batch {++processedBatches}/{totalBatchCount}");
    }
    return mappedVariants;
}

//Mapper hint
public static ProductIndexModel Map(LanguageModel language, int productId, ClothingProductModel product, List<VariantIndexModel> productVariants, List<int> productClassification)
{
    return new ProductIndexModel
    {
        Id = productId,
        Name = product.Name.FirstOrDefault(x=>x.CultureCode == language.CultureCode)?.Data ?? string.Empty,
        StyleNumber = product.StyleNumber,                
        Description = product.Description.FirstOrDefault(x => x.CultureCode == language.CultureCode)?.Data ?? string.Empty,
        Brand = product.Brand,
        Categories = productClassification,
        Variants = productVariants,
        ImageUrl = product.PrimaryImage ?? $"placeholder_{new Random().Next(1, 8)}.webp"
    };
}